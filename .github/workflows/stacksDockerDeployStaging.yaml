name: Push Laravel, React and Node.js Images To DockerHub Then Deploy to EC2 Staging

on:
  push:
    branches:
      - staging

jobs:
  Build-Laravel-And-Push-Dockerhub:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Inject GitHub Secrets into .env.example
      working-directory: amp-laravel
      run: |
        echo "APP_KEY=${{ secrets.LARAVEL_APP_KEY }}" > .env.example
        echo "DB_CONNECTION=mysql" >> .env.example
        echo "DB_HOST=${{ secrets.LARAVEL_DATABASE_HOST }}" >> .env.example
        echo "DB_PORT=${{ secrets.LARAVEL_DATABASE_PORT_NUMBER }}" >> .env.example
        echo "DB_DATABASE=${{ secrets.LARAVEL_DATABASE_NAME }}" >> .env.example
        echo "DB_USERNAME=${{ secrets.LARAVEL_DATABASE_USER }}" >> .env.example
        echo "DB_PASSWORD=${{ secrets.LARAVEL_DATABASE_PASSWORD }}" >> .env.example
        echo "JWT_SECRET=${{ secrets.LARAVEL_JWT_SECRET }}" >> .env.example
        echo "JWT_ALGO=HS256" >> .env.example
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.example

    - name: Build Laravel Docker image
      working-directory: amp-laravel
      run: docker build -f Dockerfile-Laravel -t ${{ secrets.DOCKER_USERNAME }}/laravel_amp_intelligence:latest .

    - name: Push Laravel Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/laravel_amp_intelligence:latest

  Build-NodeJS-And-Push-Dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Node.js Docker image
        working-directory: amp-node
        run: docker build -f Dockerfile-Node -t ${{ secrets.DOCKER_USERNAME }}/node_amp_intelligence:latest .

      - name: Push Node.js Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/node_amp_intelligence:latest

  Build-ReactJS-And-Deploy-On-S3-Bucket:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Check Node.js version
        run: node -v

      - name: Check npm version
        run: npm -v

      - name: Install dependencies
        working-directory: ./amp-client
        run: npm install

      - name: Build React Project
        working-directory: ./amp-client
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Deploy to S3
        run: aws s3 cp amp-client/dist/ s3://riyad-project/ --recursive

  Copy-docker-compose-To-EC2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST_STAGING }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

  Deploy-To-EC2:
    needs:
      [
        Build-Laravel-And-Push-Dockerhub,
        Build-NodeJS-And-Push-Dockerhub,
        Build-ReactJS-And-Deploy-On-S3-Bucket,
        Copy-docker-compose-To-EC2,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_STAGING }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker compose down
            docker rmi ${{ secrets.DOCKER_USERNAME }}/laravel_amp_intelligence:latest
            docker rmi ${{ secrets.DOCKER_USERNAME }}/node_amp_intelligence:latest            
            docker compose up -d
